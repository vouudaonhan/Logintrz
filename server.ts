import express from "express";
import { createClient } from "@supabase/supabase-js";
// C·∫ßn c√†i ƒë·∫∑t 'node-fetch' (npm install node-fetch) v√¨ ƒë√¢y l√† m√¥i tr∆∞·ªùng Node.js ES module
import fetch from "node-fetch"; 
import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import cors from "cors";

// Kh·ªüi t·∫°o dotenv ƒë·ªÉ t·∫£i bi·∫øn m√¥i tr∆∞·ªùng (SUPABASE_URL, HF_TOKEN, v.v.)
dotenv.config();

// C·∫•u h√¨nh ES Module path ƒë·ªÉ l√†m vi·ªác v·ªõi __dirname trong m√¥i tr∆∞·ªùng ES Modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Kh·ªüi t·∫°o Express App
const app = express();
const PORT = process.env.PORT || 10000; // S·ª≠ d·ª•ng c·ªïng 10000 l√†m m·∫∑c ƒë·ªãnh

// --- Middlewares ---
app.use(cors()); // Cho ph√©p truy c·∫≠p t·ª´ c√°c domain kh√°c (quan tr·ªçng cho frontend)
app.use(express.json()); // Ph√¢n t√≠ch body JSON t·ª´ request

// --- Supabase Config ---
const SUPABASE_URL = process.env.SUPABASE_URL as string;
const SUPABASE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY as string;

// Ki·ªÉm tra xem bi·∫øn m√¥i tr∆∞·ªùng Supabase ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ch∆∞a
if (!SUPABASE_URL || !SUPABASE_KEY) {
  console.error("‚ùå L·ªñI: Thi·∫øu SUPABASE_URL ho·∫∑c SUPABASE_SERVICE_ROLE_KEY trong .env");
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);


// --- ROUTE API ---

// 1. API Chatbot s·ª≠ d·ª•ng GLM-4.6 t·ª´ Hugging Face
app.post("/api/chat", async (req, res) => {
  const { message: userMessage } = req.body;
  const HF_TOKEN = process.env.HF_TOKEN;

  if (!userMessage) {
    return res.status(400).json({ error: "Thi·∫øu n·ªôi dung tin nh·∫Øn." });
  }
  if (!HF_TOKEN) {
    console.error("‚ùå L·ªñI: Thi·∫øu HF_TOKEN trong .env");
    return res.status(500).json({ error: "L·ªói c·∫•u h√¨nh server (token AI)." });
  }

  console.log(`üí¨ Y√™u c·∫ßu Chat t·ª´ ng∆∞·ªùi d√πng: ${userMessage.substring(0, 50)}...`);

  try {
    const response = await fetch("https://router.huggingface.co/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${HF_TOKEN}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "zai-org/GLM-4.6",
        messages: [
          { role: "system", content: "B·∫°n l√† tr·ª£ l√Ω AI th√¢n thi·ªán, tr·∫£ l·ªùi t·ª± nhi√™n b·∫±ng ti·∫øng Vi·ªát." },
          { role: "user", content: userMessage },
        ],
      }),
    });

    if (!response.ok) {
        const errorData = await response.json();
        console.error("‚ùå L·ªói API Hugging Face:", response.status, errorData);
        return res.status(response.status).json({ error: "L·ªói t·ª´ d·ªãch v·ª• AI b√™n ngo√†i.", details: errorData });
    }

    const data = await response.json();
    res.json(data);
  } catch (err) {
    console.error("‚ùå L·ªói trong qu√° tr√¨nh g·ªçi Hugging Face:", err);
    res.status(500).json({ error: "L·ªói m√°y ch·ªß n·ªôi b·ªô (chatbot)." });
  }
});

// 2. API L·∫•y link video ƒë√£ k√Ω t√™n (Signed URL) t·ª´ Supabase Storage
app.get("/api/video", async (req, res) => {
  // L·∫•y t√™n file t·ª´ query string, m·∫∑c ƒë·ªãnh l√† "Chiyonoo.mp4"
  const fileName = (req.query.file as string) || "Chiyonoo.mp4"; 
  
  console.log(`üé• Y√™u c·∫ßu link video: ${fileName}`);

  // T·∫°o URL ƒë√£ k√Ω t√™n, th·ªùi h·∫°n 1 gi·ªù (3600 gi√¢y). Thay "music" b·∫±ng t√™n bucket c·ªßa b·∫°n.
  const { data, error } = await supabase.storage
    .from("music") 
    .createSignedUrl(fileName, 3600); 

  if (error) {
    console.error("‚ùå L·ªói Supabase Storage:", error.message);
    // C√≥ th·ªÉ l√† file kh√¥ng t·ªìn t·∫°i, ho·∫∑c l·ªói quy·ªÅn truy c·∫≠p
    return res.status(500).json({ error: `L·ªói khi l·∫•y link video t·ª´ Supabase: ${error.message}` });
  }

  // Tr·∫£ v·ªÅ URL t·∫°m th·ªùi
  res.json({ url: data?.signedUrl });
});


// --- Ph·ª•c v·ª• Frontend (Static Files) ---
// Ph·ª•c v·ª• c√°c file tƒ©nh (HTML, CSS, JS) t·ª´ th∆∞ m·ª•c 'dist' (React/Vite build)
app.use(express.static(path.join(__dirname, "dist")));

// Fallback Route: Tr·∫£ v·ªÅ index.html cho m·ªçi route kh√¥ng ph·∫£i API
// Quan tr·ªçng cho vi·ªác s·ª≠ d·ª•ng React Router ·ªü ph√≠a frontend
app.get("*", (_, res) => {
  res.sendFile(path.join(__dirname, "dist", "index.html"));
});

// --- Ch·∫°y Server ---
app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
  console.log(`   S·ª≠ d·ª•ng m√¥i tr∆∞·ªùng ES Module.`);
});

